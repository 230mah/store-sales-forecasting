# utils.py

import pandas as pd
import numpy as np
from sklearn.metrics import mean_squared_error, mean_absolute_error

def rmse(y_true, y_pred):
    """
    Calcula o Root Mean Squared Error entre os valores reais e previstos.
    """
    return np.sqrt(mean_squared_error(y_true, y_pred))

def mape(y_true, y_pred):
    """
    Calcula o Mean Absolute Percentage Error entre os valores reais e previstos.
    """
    y_true, y_pred = np.array(y_true), np.array(y_pred)
    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100

def fill_missing_dates(df, date_col, freq='D'):
    """
    Preenche as datas faltantes em um DataFrame de séries temporais com valores NaN.
    """
    df[date_col] = pd.to_datetime(df[date_col])
    full_range = pd.date_range(start=df[date_col].min(), end=df[date_col].max(), freq=freq)
    df = df.set_index(date_col).reindex(full_range).rename_axis(date_col).reset_index()
    return df

def add_lag_features(df, col, lags=[1,7,14]):
    """
    Adiciona colunas de lag para uma coluna específica de um DataFrame.
    """
    for lag in lags:
        df[f'{col}_lag_{lag}'] = df[col].shift(lag)
    return df

def train_test_split_time_series(df, date_col, split_date):
    """
    Divide o DataFrame em treino e teste baseado em uma data de corte.
    """
    train = df[df[date_col] < split_date].copy()
    test = df[df[date_col] >= split_date].copy()
    return train, test
